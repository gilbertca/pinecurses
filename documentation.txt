Pinecurses Documentation
Author: Christopher Gilbert

Pinecurses - py ncurses

================================================================================
INTRODUCTION:
================================================================================
Creating pretty, easy-to-use, feature-packed interfaces can be a challenge.

The python wrapper for the ncurses library contains all of the tools required to create intricate interfaces.

However, the curses library for python only wraps the ncurses library, and ncurses is somewhat arcane.

Once one is familiar with the curses library, it is quite simple to create an application with curses.

However, modularity must be implemented by the user; otherwise each application interfaces uniquely with curses.

Each application tends to be single-purpose, and using curses effectively relies more on personal convention than any agreed upon standard.

================================================================================
PURPOSE:
================================================================================
The Pinecurses library attempts to provide these key benefits:

	1. Reusability - Creating modular componenets which can be used elsewhere.

	2. Simplification - Removing unnecessary boilerplate, and automating processes (such as screen positioning).

================================================================================
REUSABILITY:
================================================================================
The Pinecurses library aims to allow the creation of reusable applications.

The ideal application which uses Pinecurses is completely unaware of Pinecurses.

Pinecurses is to act as the 'front end' of a program, making calls to a hypothetical 'back end' which provides the data to be displayed.

So, a properly created Pinecurses program would theoretically allow for hot-swapping backends, and multiple applications can have similar displays by using the same Pinecurses front end so long as their display requirements are similar.

Likewise, depending on a client's needs, a single application could have multiple front ends, such as a GTK GUI and a Pinecurses TUI.

================================================================================
SIMPLIFICATION:
================================================================================
The Pinecurses library aims to simplify the creation of TUI front ends.

Using the Pinecurses library encourages *bigger picture thinking*.

Rather than focusing on *how* to display an element to the screen, the programmer would focus on *where* they want to display an element and *what* the element should look like, and the Pinecurses library should handle the *how*.

The Pinecurses library does this by offering a myriad of keyword attributes which can be set to define how an element is displayed without the need to run these calculations ad hoc.

An example set of these attributes may appear something like:
attributes = {
	text_color = red,
	background_color = black,
	height = 90%,
	width = 10,
	alignment = left-center
}
These attributes would produce an element with:
* Red text 
* Black background
* Relative height of 90% of available height
* Absolute width of 10 cells
* Content aligned to the left horizontally
* Content aligned the the center vertically

A programmer attempting to position content to this degree would likely face two scenarios:

	1. Programming each of these features would be hardcoded, and changing a feature would require editing that feature's code.

	2. The programmer would have to implement their own modular display manager to allow centralized editing of these features.

In the second case, the programmer would effectively have to create their own version of Pinecurses.

Rather than repeating ourselves over and over, we can make using curses more DRY, and encourage TUI development.

================================================================================
STRUCTURE:
================================================================================
The structure of a Pinecurses program can be thought of as a tree. Like, the real kind... outside.

There are four primary components to any Pinecurses TUI:

	1. Trunks (formerly Controllers)

	2. Branches (formerly Views)

	3. Leaves (formerly Items)
	
	4. Roots (currently imaginary)

Just like a real tree, a Pinecurses Program follows a similar structure:
Leaf	Leaf	Leaf	Leaf
  \	 /	  \	 /
   Branch	   Branch
	  \	 /
	   Trunk
	     |
	  (Roots)

NOTE: Roots do not yet exist, and are a theoretical API which may or may not be included under this name in production Pinecurses

Leaves can be thought of as the final display element. Some examples of leaves include:
	
	* An entry in a list or menu
	* A text box for user input or program output, such as an area for sending or receiving a message
	* Message text or button contained within a popup menu

Branches can be thought of as a collection of display elements. Branches can have many leaves, but a single leaf can not be connected to multiple branches. Examples of Branches include:

	* A list or menu containing multiple entries
	* A collection of text boxes, such as a chat client with separate areas for sent and received messages
	* A popup menu which may contain text or buttons

Trunks can be thought of as the glue for a Pinecurses interface. A trunk can have multiple branches, but a branch can not be connected to multiple Trunks.

The Trunk of a Pinecurses TUI performs several important functions, and they typically will not have any display elements associated with them.

The Trunk is responsible for allowing the various branches to communicate with each other, as well as providing programwide functionality.

For example: Pressing the Enter key may result in different effects based on what the user has selected within the interface; while pressing the Escape key may cause the application to quit regardless of the screen's state. In this example, the Trunk is responsible for detecting the Escape key, and properly handling exit conditions.

In theory, if a programmer were to create multiple trunks for different interfaces, they could both operate at the same time, provided another higher-level Trunk is created with the same One-to-Many relationship.

[ROOTS ARE THEORETICAL AT THIS POINT IN TIME]

Roots are what connects the Tree to everything else. A Trunk can only have one set of Roots, and Roots can only connect to one Trunk.

Roots are the API for a Pinecurses TUI. If anything goes on outside of the Pinecurses loop, the interface can be informed of this activity via the Roots, and the Trunk can delegate any required updates to the Branches and Leaves.

================================================================================
INTERFACES:
================================================================================
Simplicity is one of the key ideas behind a Pinecurses interface.

In order to maintain this simplicity, Pinecurses offers relatively few (albeit detailed) interfaces.

The interfaces which most programmers are as follows:

	1. Keyword attributes - json, or other markup
	2. Key mapping - key presses to function calls
	3. 

KEYWORD ATTRIBUTES:
********************************************************************************
The keyword attributes are primarily to set display characteristics.

These may be provided programatically by passing a dictionary of attributes PinecursesObject.__init__(...). However, the recomended method is by including these attributes in a json file, or any other supported markup language.

The main purpose for these attributes is to provide a template for displaying data to the screen.

For example, take the following list of keyword attributes:
button_attributes = {
	height = 5%,
	width = 5%,
	text_color = red,
}
We can assign these attributes to a series of Leaves. Each of the leaves will take 5% of the screen's width and height, and will display their text in red.

Consider these keyword attributes:
title_attributes = {
	height = 1,
	width = 100%,
	text = "Title",
	alignment = top-center
}
Assigning these attributes to a Leaf would result in a bar across the top of the screen containing text "Title."

From these two example sets of attributes, one can begin to see how an application can be built using Pinecurses.

As a programmer adds elements to the screen, those elements can be assigned these attributes, and Pinecurses will handle displaying them properly.

KEY MAPPING:
********************************************************************************
Another key feature of using a Pinecurses TUI is the ability to map function calls to arbitrary keys at various levels in the interface tree.

Mapping a key at each level in the tree should result in that key only having an effect if a certain element is selected.

	Mapping a key at the Trunk level causes that key to run the mapped function regardless of the interface's state.

	Mapping a key at the Branch level causes that key to run the mapped function if the interface is pointing at that window/collection of Leaves.

	Mapping a key at the Leaf level causes that key to run the mapped function if the interface is pointing at the particular Branch containing the Leaf, as well as pointing specifically at that Leaf.

This can result in various side effects based on the the structure of the Pinecurses interface.

Consider the following tree with an arbitrary number of Leaves:

Leaf(..)Leaf
  \   |	 /
   Branch
      |
   Trunk

This would result in a 'single-paned interface.' All Leaves displayed on the screen are contained within the single Branch. The interface might look something like this:

----------------------------------------
|*		Title Leaf	       |
|				       |
|				       |
|	      * Menu Leaf 1	       |
|		Menu Leaf 2	       |
|				       |
|				       |
|				       |
|				       |
|				       |
----------------------------------------

The * represents the currently selected Pinecurses object. The * is customizable (using a keyword attribute as detailed above).

Note that the Branch is considered to be selected in the same manner that 'Menu Leaf 1' is considered to be selected (note the * in the top left corner). Thanks to Polyinheritance, the 'selected' functionality is included in both Branches and Leaves. However, by assigning the Leaf to have a 'selected character' of '*', and the Branch to have a 'selected character' of ' ', this functionality can be effectively hidden.

Consider the following tree, with an arbitrary number of leaves:

Leaf	Leaf	Leaf	Leaf
  \	 /	  \	 /
   Branch	   Branch
	  \	 /
	   Trunk

This would result in a 'multi-paned interface' that might look like this:
----------------------------------------
|*	Title	    |	    Title      |
|		    |		       |
|	 Menu	    |	    *Menu      |
|	*Menu	    |	     Menu      |
|		    |		       |
|		    |		       |
|		    |		       |
|		    |		       |
|		    |		       |
|		    |		       |
----------------------------------------

================================================================================
SIMPLEST USE CASES:
================================================================================
The potential requirements of any interface are limitless.

In order to maintain the simplicity behind the Pinecurses library, Pinecurses should primarily be used for specific use cases.

Although a savvy programmer may be able to modify Pinecurses to suit a particular niche, there may be other libraries better suited for those cases.

With that in mind, Pinecurses and it's features will be primarily focused on a few *simple* use cases.

These use cases are:

	* Menus/Lists with selectable entries
	* Prettified/Formatted text and/or outputs from commands
	*

Again, anything is possible, and Pinecurses can be extended to include features which cater to use cases not mentioned above.

However, the further one strays from these use cases, the more effort and time will be put into those features.
